"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Plus, Clock, Layout, Folder } from "lucide-react"
import { CreateCommitteeDialog } from "@/components/create-committee-dialog"

// Mock data - replace with actual data later
const recentCommittees = [
  { id: 1, name: "Security Council", members: 15, lastAccessed: "2 hours ago" },
  { id: 2, name: "General Assembly", members: 193, lastAccessed: "1 day ago" },
  { id: 3, name: "Human Rights Council", members: 47, lastAccessed: "3 days ago" },
]

const templates = [
  { id: 1, name: "UN Security Council", members: 15, description: "Standard UN Security Council setup" },
  { id: 2, name: "Small Committee", members: 10, description: "For smaller discussion groups" },
  { id: 3, name: "Large Assembly", members: 50, description: "For large-scale simulations" },
]

const myCommittees = [
  { id: 1, name: "ECOSOC 2024", members: 54, created: "Jan 15, 2025" },
  { id: 2, name: "DISEC Session", members: 25, created: "Feb 20, 2025" },
  { id: 3, name: "Custom MUN", members: 30, created: "Mar 5, 2025" },
]

export default function Page() {
  const [dialogOpen, setDialogOpen] = useState(false)

  return (
    <main className="min-h-dvh">
      <CreateCommitteeDialog open={dialogOpen} onOpenChange={setDialogOpen} />
      <div className="mx-auto max-w-7xl px-4 py-6">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold">Committees</h1>
            <p className="text-muted-foreground">Manage and create your committees</p>
          </div>
          <Button onClick={() => setDialogOpen(true)} size="lg">
            <Plus className="mr-2 h-5 w-5" />
            Create New Committee
          </Button>
        </div>

        {/* Recent Committees Section */}
        <section className="mb-8">
          <div className="flex items-center gap-2 mb-4">
            <Clock className="h-5 w-5 text-muted-foreground" />
            <h2 className="text-2xl font-semibold">Recent Committees</h2>
          </div>
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {recentCommittees.map((committee) => (
              <Card key={committee.id} className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle>{committee.name}</CardTitle>
                  <CardDescription>{committee.members} members</CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground">Last accessed: {committee.lastAccessed}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </section>

        {/* Templates Section */}
        <section className="mb-8">
          <div className="flex items-center gap-2 mb-4">
            <Layout className="h-5 w-5 text-muted-foreground" />
            <h2 className="text-2xl font-semibold">Templates</h2>
          </div>
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {templates.map((template) => (
              <Card key={template.id} className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle>{template.name}</CardTitle>
                  <CardDescription>{template.members} members</CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground">{template.description}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </section>

        {/* My Committees Section */}
        <section className="mb-8">
          <div className="flex items-center gap-2 mb-4">
            <Folder className="h-5 w-5 text-muted-foreground" />
            <h2 className="text-2xl font-semibold">My Committees</h2>
          </div>
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {myCommittees.map((committee) => (
              <Card key={committee.id} className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <CardTitle>{committee.name}</CardTitle>
                  <CardDescription>{committee.members} members</CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground">Created: {committee.created}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </section>
      </div>
    </main>
  )
}
  title: string
  abbrev: string
  agenda: string
  members: Selected[]
  countries: Array<{ 
    name: string; 
    code: string; 
    attendance?: 'present' | 'present-voting' | 'absent' 
  }>
  chair: string
  coChair: string
  rapporteur: string
  createdAt: string
}

// ----- Page -----
export default function Page() {
  const [title, setTitle] = useState("Editable Committee Name")
  const [selected, setSelected] = useState<Selected[]>([])
  const [abbrev, setAbbrev] = useState("")
  const [agenda, setAgenda] = useState("")
  const [committeeCountries, setCommitteeCountries] = useState<Array<{ 
    name: string; 
    code: string; 
    attendance?: 'present' | 'present-voting' | 'absent' 
  }>>([])
  const [chair, setChair] = useState("")
  const [coChair, setCoChair] = useState("")
  const [rapporteur, setRapporteur] = useState("")

  function addCountry(c: Country) {
    setSelected((curr) => {
      if (curr.some((x) => x.id === c.id)) return curr
      return [...curr, { id: c.id, name: c.name, flagQuery: c.flagQuery }]
    })
  }

  function addCustom(name: string) {
    const id = `custom-${name.toLowerCase().replace(/[^a-z0-9]+/g, "-")}`
    setSelected((curr) => {
      if (curr.some((x) => x.id === id)) return curr
      return [...curr, { id, name, flagQuery: "custom member icon" }]
    })
  }

  function onCreateCommittee(n: {
    name: string;
    abbrev: string;
    agenda: string;
    countries: Array<{ name: string; code: string }>;
    countryList: Array<{ id: string; name: string; flagQuery: string }>;
    chair: string;
    coChair: string;
    rapporteur: string;
  }) {
    setTitle(n.name)
    setAbbrev(n.abbrev)
    setAgenda(n.agenda)
    setChair(n.chair)
    setCoChair(n.coChair)
    setRapporteur(n.rapporteur)
    
    // Set countries for attendance tracking
    setCommitteeCountries(n.countries.map(country => ({
      ...country,
      attendance: 'absent' as const
    })))
    
    // Set countries for speaker list
    setSelected(n.countryList)
    
    // Log creation
    logSessionStart(`Committee prepared: ${n.name} (${n.abbrev})`, n.countries.length)
  }

  function remove(id: string) {
    setSelected((curr) => {
      const member = curr.find((x) => x.id === id)
      if (member) {
        logMemberRemoved(member.name)
      }
      return curr.filter((x) => x.id !== id)
    })
  }

  function rename(id: string, name: string) {
    setSelected((curr) => {
      const oldMember = curr.find((x) => x.id === id)
      if (oldMember && oldMember.name !== name) {
        logMemberRenamed(oldMember.name, name)
      }
      return curr.map((x) => (x.id === id ? { ...x, name } : x))
    })
  }

  function clearAll() {
    setSelected([])
  }

  const router = useRouter()

  function start() {
    if (!agenda.trim()) {
      alert("Please create a committee and enter an agenda before starting the session")
      return
    }

    // Log session start (member count may be zero)
    logSessionStart(title, selected.length)

    // Create session object and push to sessions array in sessionStorage
    const newSession = {
      id: crypto.randomUUID(),
      title,
      abbrev,
      agenda,
      members: selected,
      countries: committeeCountries,
      chair,
      coChair,
      rapporteur,
      createdAt: new Date().toISOString(),
    }

    try {
      const raw = sessionStorage.getItem("sessions")
      const arr = raw ? JSON.parse(raw) : []
      arr.push(newSession)
      sessionStorage.setItem("sessions", JSON.stringify(arr))
    } catch (e) {
      console.error("Failed to persist session", e)
    }

    // Create and save the committee data
    const committee = {
      id: newSession.id,
      name: title,
      abbrev,
      agenda,
      chair,
      coChair,
      rapporteur,
      countries: selected.map(country => ({
        name: country.name,
        code: country.flagQuery,
        attendance: 'absent' as const  // Start with absent by default
      })),
      countryList: selected.map(country => ({
        id: country.id,
        name: country.name,
        flagQuery: country.flagQuery,
        attendance: 'absent' as const  // Start with absent by default
      }))
    };

    try {
      // Save the committee data
      saveCommittee(committee);
      console.log('Committee data saved:', { id: committee.id });

      // Navigate to speaker-list page with committee ID
      router.push(`/speaker-list?committee=${committee.id}`);
    } catch (error) {
      console.error('Failed to save committee data:', error);
    }
  }

  function handleLoadSession(session: SavedSession) {
    // load session into current UI state
    setTitle(session.title || "")
    setAbbrev(session.abbrev || "")
    setAgenda(session.agenda || "")
    setSelected(session.members || [])
    setCommitteeCountries(session.countries || [])
    setChair(session.chair || "")
    setCoChair(session.coChair || "")
    setRapporteur(session.rapporteur || "")
  }

  return (
    <main className="min-h-dvh">
      <div className="mx-auto max-w-7xl px-4 py-6">
        <div className="grid gap-6 md:grid-cols-2">
          <div className="space-y-6">
            <LoadCommittee />
            <SetupNewCommittee onCreateAction={onCreateCommittee} />
            <SessionsWidget onLoadAction={handleLoadSession} />
          </div>

          <EditableCommittee
            title={title}
            setTitle={setTitle}
            items={selected}
            onRemove={remove}
            onRename={rename}
            onClear={clearAll}
            onStart={start}
          />
        </div>
      </div>
    </main>
  )
}
